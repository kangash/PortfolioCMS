AJAX — это аббревиатура, которая означает Asynchronous Javascript and XML

Как уже было сказано, AJAX использует асинхронную передачу данных. Это значит, что пока идёт передача данных, пользователь может совершать другие, необходимые ему действия.

AJAX использует два метода работы с веб-страницей: изменение Web-страницы не перезагружая её, и динамическое обращение к серверу. Второе может осуществляться несколькими способами, в частности,  XMLHttpRequest, о чем мы и будем говорить, и использование техники скрытого фрейма.

Методы объекта XMLHttpRequest
    Заметьте, что названия методов записаны в том же стиле (Camel-style), что и другие функции Javascript. 
    Будьте внимательны при их использовании.
    abort() — отмена текущего запроса к серверу.
    getAllResponseHeaders() — получить все заголовки ответа от сервера.
    getResponseHeader(«имя_заголовка») — получить указаный заголовок.
    open(«тип_запроса»,«URL»,«асинхронный»,«имя_пользователя»,«пароль») — инициализация запроса к серверу, указание метода запроса.
    Тип запроса и URL — обязательные параметры. Третий аргумент — булево значение. 
    Обычно всегда указывается true или не указывается вообще (по умолчанию — true). 
    Четвертый и пятый аргументы используются для аутентификации (это очень небезопасно,
    хранить данные об аутентификации в скрипте, так как скрипт может посмотреть любой пользователь).
    send(«содержимое») — послать HTTP запрос на сервер и получить ответ.
    setRequestHeader(«имя_заголовка»,«значение») — установить значения заголовка запроса.

Свойства объекта XMLHttpRequest
    onreadystatechange — одно из самых главных свойств объекта XMLHttpRequest.
    С помощью этого свойства задаётся обработчик, который вызывается всякий раз при смене статуса объекта.

    readyState — число, обозначающее статус объекта.
    responseText — представление ответа сервера в виде обычного текста (строки).
    responseXML — объект документа, совместимый с DOM, полученного от сервера.
    status — состояние ответа от сервера.
    statusText — текстовое представление состояния ответа от сервера.
    Следует подробнее расммотреть свойство readyState:
    0 — Объект не инициализирован.
    1 — Объект загружает данные.
    2 — Объект загрузил свои данные.
    3 — Объек не полностью загружен, но может взаимодействовать с пользователем.
    4 — Объект полностью инициализирован; получен ответ от сервера.
    Именно опираясь на состояние готовности объекта можно представить посетителю информацию о том, 
    на какой стадии находится процесс обмена данными с сервером и, возможно, оповестить его об этом визуально.

Алгоритм запроса к серверу выглядит так:
    -Проверка существования XMLHttpRequest.
    -Инициализация соединения с сервером.
    -Посылка запрса се  рверу.
    -Обработка полученных данных.

----------------------------------------------------------------------------------------------------------
[Варианты ответа от сервера]

От сервера можно получить данные нескольких видов:
    -Обычный текст
    -XML
    -JSON (Javascript Object Notation)

Если вы получаете обычный текст, то вы можете сразу же направить его в контейнер, 
то есть на вывод. При получении данных в виде XML вы должны обработать данные с 
помощью DOM-функций, и представить результат с помощью HTML.

JSON — это объектная нотация Javascript. С ее помощью можно представить объект в виде
 строки (здесь можно привести аналогию с функцией сериализации). При получении JSON-данных 
 вы должны выполнить их, чтобы получить полноценный объект Javascript и произвести с ним необходимые операции. 
 , что такая передача данных и выполнение их не являются безопасными. Вы должны следить за тем, что поступает на исполнение.


Пример кода JSON:
{
    "data":
    {
        "misc":
        [
            {
                "name" : "JSON-элемент один",
                "type" : "Подзаголовок 1"
            },
            {
                "name" : "JSON-элемент два",
                "type" : "Подзаголовок 2"
            }
        ]
    }
} 
При получении такого кода, производим следующее действие:
var responsedata = eval("(" + Request.responseText + ")")

После выполнения данного кода вам будет доступен объект responsedata.

__________________________________________________________________________
                    ajax от jquery - $.ajax()

jQuery функция $.ajax() позволяет выполнить асинхронный AJAX запрос. AJAX (от англ. Asynchronous Javascript and XML 
— "асинхронный JavaScript и XML") — подход к построению интерактивных пользовательских интерфейсов веб-приложений, 
заключающийся в "фоновом" обмене данными браузера с веб-сервером.
`
data.
    Тип: PlainObject, или String, или Array.
    Данные, которые будут отправлены на сервер. Если они не является строкой, то преобразуются в строку запроса. 
    Для GET запросов строка будет добавлена к URL. Для того, чтобы предотвратить автоматическую обработку вы можете 
    воспользоваться параметром processData со значением false. Если данные передаются в составе объекта, то он должен 
    состоять из пар ключ/значение. Если значение является массивом, то jQuery сериализует несколько значений с одним и 
    тем же ключом (в зависимости от значения параметра traditional, который позволяет задействовать традиционный тип 
    сериализации основанный на методе $.param).

contentType (по умолчанию: "application/x-www-form-urlencoded; charset=UTF-8").
    Тип: Boolean, или String.
    Определяет тип содержимого, которое указывается в запросе при передаче данных на сервер. С версии с jQuery 1.6 
    допускается указать значение false, в этом случае jQuery не передает в заголовке поле Content-Type совсем.

method (по умолчанию: "GET").
    Тип: String.
    Метод HTTP, используемый для запроса (например, "POST", "GET", "PUT"). Добавлен в версии jQuery 1.9.0.

cache (по умолчанию: true, для dataType "script" и "jsonp" false).
    Тип: Boolean.
    Если задано значение false, то это заставит запрашиваемые страницы не 
    кэшироваться браузером. Обратите внимание, что значение false будет правильно работать только с HEAD и GET запросами.

processData (по умолчанию: true).
    Тип: Boolean.
    По умолчанию данные, передаваемые в параметр data в качестве объекта будут обработаны и преобразованы в строку запроса, 
    подходящую для типа данных по умолчанию "application/x-www-form-urlencoded". Если Вам необходимо отправить DOMDocument,
    или другие не обработанные данные, то установите значение этого параметра в false.

success.
    Тип: Function( Anything data, String textStatus, jqXHR jqXHR ).
    Функция обратного вызова, которая вызывается если AJAX запрос выполнится успешно. Функции передаются три аргумента:
    data - данные возвращенные с сервера. Данные форматируюся в соответствии с параметрами dataType, или dataFilter, если они указаны
    textStatus - строка описывающая статус запроса.
    jqXHR - объект jqXHR (до версии jQuery 1.4.x объект XMLHttpRequest).
    Начиная с версии jQuery 1.5 допускается передавать в качестве значения параметра массив функций, при этом каждая функция будет вызвана в свою очедерь.

    _____Пример ajax кода:_________

        $.ajax({
            url: '/admin/page/update/',
            type: this.ajaxMethod,
            data: formData,
            cache: false,
            processData: false,
            contentType: false,
            beforeSend: function(){

            },
            success: function(result) {
                console.log(formData);
               //window.location.reload();
            }
        });





__________________________________________________________________________
window
остановка всех текущих JS событий
Метод .on() позволяет задать как прямые, так и делегированные события.

Аргументы функций обратного вызова имеют свойства 